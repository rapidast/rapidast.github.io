<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RapiDAST</title><link>https://example.docsy.dev/</link><description>Recent content on RapiDAST</description><generator>Hugo</generator><language>en</language><atom:link href="https://example.docsy.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration Overview</title><link>https://example.docsy.dev/docs/02-how-tos/configuration-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/configuration-overview/</guid><description>&lt;p>The configuration file is presented as YAML, and contains several main entries:&lt;/p>
&lt;ul>
&lt;li>&lt;code>config&lt;/code> : contains &lt;code>configVersion&lt;/code> which tells RapiDAST how to consume the config file&lt;/li>
&lt;li>&lt;code>application&lt;/code> : contains data relative to the application being scanned : name, etc.&lt;/li>
&lt;li>&lt;code>general&lt;/code> : contains data that will be used by all the scanners, such as proxy configuration, etc.
&lt;ul>
&lt;li>Each scanner can override an entry from &lt;code>general&lt;/code> by creating an entry with the same name&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>scanners&lt;/code> : list of scanners, and their configuration&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://example.docsy.dev/docs/02-how-tos/configuration-using-envvar/">Enviornment variables&lt;/a> can be used for configuration, e.g. for secrets.&lt;/p></description></item><item><title>Configuration using environment variables</title><link>https://example.docsy.dev/docs/02-how-tos/configuration-using-envvar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/configuration-using-envvar/</guid><description>&lt;p>You may not want to directly have configuration values inside the configuration. Typically: either the entry is a secret (such as a password), but the configuration needs to be public, or the entry needs to be dynamically generated (e.g.: a cookie, a uniquely generated URL, etc.) at the time of running RapiDAST, and it&amp;rsquo;s an inconvenient to always having to modify the configuration file for each run.&lt;/p>
&lt;p>To avoid this, RapiDAST proposes 2 ways to provide a value for a given configuration entry. For example, to provide a value for the entry general.authentication.parameters.rtoken, you can either (in order of priority):&lt;/p></description></item><item><title>ZAP</title><link>https://example.docsy.dev/docs/03-scanners/zap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/03-scanners/zap/</guid><description>&lt;p>ZAP (Zed Attack Proxy) is an open-source DAST tool. It can be used for scanning web applications and API.&lt;/p>
&lt;p>See &lt;a href="https://www.zaproxy.org/">https://www.zaproxy.org/&lt;/a> for more information.&lt;/p>
&lt;h5 id="methodology">Methodology&lt;a class="td-heading-self-link" href="#methodology" aria-label="Heading self-link">&lt;/a>&lt;/h5>
&lt;p>ZAP needs to be pointed to a list of endpoints to the tested application. Those can be:&lt;/p>
&lt;ul>
&lt;li>A regular HTML page&lt;/li>
&lt;li>A REST endpoint&lt;/li>
&lt;li>A GraphQL interface&lt;/li>
&lt;/ul>
&lt;p>The GraphQL interface can be provided to RapiDAST via the &lt;code>graphql&lt;/code> configuration entry. It requires the URL of the GraphQL interface and the GraphQL schema(if available), in order to be scanned. Additional options are available. See the &lt;code>config-template-zap-long.yaml&lt;/code> configuration template file for a list of options.&lt;/p></description></item><item><title>Authentication</title><link>https://example.docsy.dev/docs/02-how-tos/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/authentication/</guid><description>&lt;p>Authentication is configured in the &lt;code>general&lt;/code> entry, as it can be applied to multiple scanning options. Currently, Authentication is applied to [ZAP] scanning only. In the long term it may be applied to other scanning configurations.&lt;/p>
&lt;h2 id="supported-options">Supported options:&lt;a class="td-heading-self-link" href="#supported-options" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="no-authentication">No authentication:&lt;a class="td-heading-self-link" href="#no-authentication" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The scanners will communicate anonymously with the application&lt;/p>
&lt;h3 id="oauth2-using-a-refresh-token">OAuth2 using a Refresh Token:&lt;a class="td-heading-self-link" href="#oauth2-using-a-refresh-token" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>This method describes required parameters needed to retrieve an access token, using a refresh token as a secret.&lt;/p></description></item><item><title>Garak</title><link>https://example.docsy.dev/docs/03-scanners/garak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/03-scanners/garak/</guid><description>&lt;p>Garak is an LLM AI scanner developed by NVIDIA. See &lt;a href="https://github.com/NVIDIA/garak">https://github.com/NVIDIA/garak&lt;/a> for more information.&lt;/p>
&lt;p>The following is an example to launch a scan:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scanners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">garak&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">parameters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">plugins&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">model_type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">huggingface&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">model_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">gpt2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Run in container</title><link>https://example.docsy.dev/docs/01-getting-started/run-in-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/01-getting-started/run-in-container/</guid><description>&lt;p>Run the pre-built &lt;a href="https://quay.io/repository/redhatproductsecurity/rapidast">rapidast container image&lt;/a>, which includes scanners like [ZAP]. Not compatible with config files using &lt;code>general.container.type&lt;/code> set to &lt;code>podman&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Prerequisites&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker&lt;/code> / &lt;code>podman&lt;/code> (&amp;gt;= v3.0.1)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Run&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ podman run -v ./config.yaml:/opt/rapidast/config/config.yaml:Z quay.io/redhatproductsecurity/rapidast:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Sample config is very minimal and has no &lt;a href="https://example.docsy.dev/docs/01-getting-started/run-in-container/#authentication">Authentication&lt;/a> enabled&lt;/li>
&lt;li>The &lt;code>:Z&lt;/code> option is only necessary on RHEL/CentOS/Fedora systems with SELinux enabled&lt;/li>
&lt;li>To retrieve scan results, add a volume mount like &lt;code>-v ./results/:/opt/rapidast/results/:Z&lt;/code>. The permissions of the &lt;code>./results/&lt;/code> directory may need to be modified first with a command like &lt;code>chmod o+w ./results/&lt;/code> to be writeable by the rapidast user in the container.&lt;/li>
&lt;li>RapiDAST images are currently built on the linux/amd64 architecture only. To run a scan on MacOS(arm64), use &lt;code>--platform=linux/amd64&lt;/code>.&lt;/li>
&lt;/ul></description></item><item><title>Nessus</title><link>https://example.docsy.dev/docs/03-scanners/nessus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/03-scanners/nessus/</guid><description>&lt;p>Nessus is a vulnerability scanner developed by Tenable, Inc. It helps organizations identify and address security vulnerabilities across various systems, devices, and applications.&lt;/p>
&lt;p>The following is an example to launch a scan:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scanners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">nessus&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">url&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">https://nessus-example.com/&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># URL of Nessus instance&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">username: foo # OR username_from_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">NESSUS_USER&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">password: bar # OR password_from_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">NESSUS_PASSWORD&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scan&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">test-scan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># name of new scan to create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">folder&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">test-folder&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># name of folder in to contain scan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">policy&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;py-test&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># policy used for scan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># timeout: 600 # timeout in seconds to complete scan&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">targets&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Run from source</title><link>https://example.docsy.dev/docs/01-getting-started/run-from-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/01-getting-started/run-from-source/</guid><description>&lt;p>Install dependencies and run RapiDAST directly on a host machine. Unless using the config setting of &lt;code>general.container.type: podman&lt;/code>, scanners like [ZAP] are expected to be installed on the host system.&lt;/p>
&lt;p>&lt;strong>Prerequisites&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>python&lt;/code> &amp;gt;= 3.6.8 (3.7 for MacOS/Darwin)&lt;/li>
&lt;li>&lt;code>podman&lt;/code> &amp;gt;= 3.0.1
&lt;ul>
&lt;li>required when you want to run scanners from their container images, rather than installing them to your host.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>See &lt;code>requirements.txt&lt;/code> for a list of required python libraries&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Setup&lt;/strong>:&lt;/p>
&lt;p>Clone the repository.&lt;/p></description></item><item><title>CI/CD Examples</title><link>https://example.docsy.dev/docs/04-ci-cd-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/04-ci-cd-examples/</guid><description>&lt;p>More examples to show how RapiDAST can be run in various CI/CD pipelines are found at &lt;a href="https://github.com/RedHatProductSecurity/rapidast/tree/development/examples">https://github.com/RedHatProductSecurity/rapidast/tree/development/examples&lt;/a>&lt;/p></description></item><item><title>Generic plugin</title><link>https://example.docsy.dev/docs/03-scanners/advanced-generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/03-scanners/advanced-generic/</guid><description>&lt;p>In addition to the scanners mentioned above, RapiDAST can run any other scanning tools. It is possible to request RapiDAST to run a command and process stdout results, using the &lt;code>generic&lt;/code> plugin. One use case is to run your own tools or scripts and export the results to Google Cloud Storage.&lt;/p>
&lt;p>The following is an example to run a command or a tool in the host where a RapiDAST scan runs:&lt;/p></description></item><item><title>Getting started with a web scan</title><link>https://example.docsy.dev/docs/01-getting-started/getting-started-with-web-scan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/01-getting-started/getting-started-with-web-scan/</guid><description>&lt;p>This tutorial shows you how to&lt;/p>
&lt;ol>
&lt;li>Create a configuration file for testing the web application.&lt;/li>
&lt;li>Run RapiDAST and get the results.
&lt;ul>
&lt;li>First run with passive scanning only, which can save time at the initial scanning phase. There are various situations that can cause an issue, not only from scanning set up but also from your application or test environment. Active scanning takes a long time in general.&lt;/li>
&lt;li>Once passive Scanning has run successfully, run another scan with active scanning enabled in the configuration file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="web-openapi-based-scanning">Web (OpenAPI based scanning)&lt;a class="td-heading-self-link" href="#web-openapi-based-scanning" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Create a YAML config file(e.g. config.yaml) like the following:&lt;/p></description></item><item><title>Exporting to Google Cloud Storage</title><link>https://example.docsy.dev/docs/02-how-tos/export-to-gcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/export-to-gcs/</guid><description>&lt;p>This simply stores the data as a compressed tarball in a Google Cloud Storage bucket.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Defect dojo configuration&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">googleCloudStorage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">keyFile&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/path/to/GCS/key&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># optional: path to the GCS key file (alternatively: use GOOGLE_APPLICATION_CREDENTIALS)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bucketName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;name-of-GCS-bucket-to-export-to&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Mandatory&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">directory&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;override-of-default-directory&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Optional directory where the credentials have write access, defaults to `RapiDAST-&amp;lt;product&amp;gt;`&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once this is set, scan results will be exported to the bucket automatically. The tarball file will include:&lt;/p></description></item><item><title>Getting started with a LLM AI scan</title><link>https://example.docsy.dev/docs/01-getting-started/getting-started-with-llm-scan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/01-getting-started/getting-started-with-llm-scan/</guid><description>&lt;p>This tutorial shows you how to&lt;/p>
&lt;ol>
&lt;li>Create a configuration file for testing a LLM AI model.&lt;/li>
&lt;li>Run RapiDAST and get the results.&lt;/li>
&lt;/ol>
&lt;h2 id="llm">LLM&lt;a class="td-heading-self-link" href="#llm" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Create a YAML config file(e.g. config.yaml) like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">configVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">application&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">shortName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;garak-test-1.0&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">scanners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">garak&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">model_type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">huggingface &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># required, e.g. hugginngface, openai, rest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">model_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">gpt2 &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run a scan:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ podman run -v ./config.yaml:/opt/rapidast/config/config.yaml:Z quay.io/redhatproductsecurity/rapidast:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a href="https://example.docsy.dev/docs/01-getting-started/run-in-container/">here&lt;/a> for more information on running a scan&lt;/p></description></item><item><title>Troubleshooting</title><link>https://example.docsy.dev/docs/05-troubleshoot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/05-troubleshoot/</guid><description>&lt;h3 id="hitting-dockerio-rate-limits">Hitting docker.io rate limits&lt;a class="td-heading-self-link" href="#hitting-dockerio-rate-limits" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>If you are unable to pull/update an image from docker.io due to rate-limit errors, authenticate to your Docker Hub account.&lt;/p>
&lt;h3 id="error-getting-access-token-using-oauth2">&amp;ldquo;Error getting access token&amp;rdquo; using OAuth2&lt;a class="td-heading-self-link" href="#error-getting-access-token-using-oauth2" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Possible pitfalls :&lt;/p>
&lt;ul>
&lt;li>Make sure that the parameters are correct (&lt;code>client_id&lt;/code>, &lt;code>token_endpoint&lt;/code>, &lt;code>rtoken_var_name&lt;/code>) and that the refresh token is provided (via environment variable), and is valid&lt;/li>
&lt;li>Make sure you do not have an environment variable in your current environment that overrides what is set in the &lt;code>envFile&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="issues-with-the-zap-scanner">Issues with the ZAP scanner&lt;a class="td-heading-self-link" href="#issues-with-the-zap-scanner" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The best way to start is to look at the ZAP logs, which are stored in &lt;code>~/.ZAP/zap.log&lt;/code> (within the container where ZAP was running)&lt;/p></description></item><item><title>Developer's guide</title><link>https://example.docsy.dev/docs/06-developer-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/06-developer-guide/</guid><description>&lt;h2 id="install-project-requirements-for-development">Install project requirements for development&lt;a class="td-heading-self-link" href="#install-project-requirements-for-development" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install dependencies using the &lt;code>requirements-dev.txt&lt;/code> file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pip install -r requirements-dev.txt
&lt;/code>&lt;/pre>&lt;h2 id="install-pre-commit">Install pre-commit&lt;a class="td-heading-self-link" href="#install-pre-commit" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>pre-commit is being used to ensure that all code committed to the repository meets a certain level of quality and consistency, e.g. regarding style and formatting issues.&lt;/p>
&lt;p>The current checks are found in the &lt;code>.pre-commit-config.yaml&lt;/code> file.&lt;/p>
&lt;p>Once pre-commit is installed in the following way, code will be checked automatically when a commit is made.&lt;/p></description></item><item><title>Exporting to OWASP Defect Dojo</title><link>https://example.docsy.dev/docs/02-how-tos/export-to-owasp-defect-dojo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/export-to-owasp-defect-dojo/</guid><description>&lt;p>RapiDAST supports integration with &lt;a href="https://owasp.org/www-project-defectdojo/">OWASP DefectDojo&lt;/a> which is an open source vulnerability management tool.&lt;/p>
&lt;h2 id="preamble-creating-defectdojo-user">Preamble: creating DefectDojo user&lt;a class="td-heading-self-link" href="#preamble-creating-defectdojo-user" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>RapiDAST needs to be able to authenticate to your DefectDojo instance. However, ideally, it should have the minimum set of permissions, such that it will not be allowed to modify products other than the one(s) it is supposed to.&lt;/p>
&lt;p>In order to do that:&lt;/p>
&lt;ul>
&lt;li>create a user without any global role&lt;/li>
&lt;li>add that user as a &amp;ldquo;writer&amp;rdquo; for the product(s) it is supposed to scan&lt;/li>
&lt;/ul>
&lt;p>Then the product, as well as an engagement for that product, must be created in your DefectDojo instance. It would not be advised to give the RapiDAST user an &amp;ldquo;admin&amp;rdquo; role and simply set &lt;code>auto_create_context&lt;/code> to True, as it would be both insecure and accident prone (a typo in the product name would let RapiDAST create a new product)&lt;/p></description></item><item><title>Multiple scans at once</title><link>https://example.docsy.dev/docs/02-how-tos/multiple-scans/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/multiple-scans/</guid><description>&lt;p>It is possible to run a scanner several times with different configurations. This is done by adding a different identifier to each scan, by appending &lt;code>_&amp;lt;id&amp;gt;&lt;/code> to the scanner name.&lt;/p>
&lt;p>For example :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scanners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">zap_unauthenticated&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiScan&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apis&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://example.com/api/openapi.json&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">zap_authenticated&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">authentication&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http_basic&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">parameters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">username&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;mypassw0rd&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiScan&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apis&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://example.com/api/openapi.json&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above, the ZAP scanner will first run without authentication, and then rerun again with a basic HTTP authentication.
The results will be stored in their respective names (i.e.: &lt;code>zap_unauthenticated&lt;/code> and &lt;code>zap_authenticated&lt;/code> in the example above).&lt;/p></description></item><item><title>Specifiying scanner path</title><link>https://example.docsy.dev/docs/02-how-tos/specify-scanner-path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/specify-scanner-path/</guid><description>&lt;p>When running RapiDAST scans from source on your localhost, specify the path to the scanning tool if it is not included in your system&amp;rsquo;s PATH.&lt;/p>
&lt;p>For macOS, the default path to ZAP is typically &lt;code>/Applications/ZAP.app/Contents/Java/zap.sh&lt;/code>.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scanners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">container&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">parameters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">executable&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/Applications/ZAP.app/Contents/Java/zap.sh&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Build a RapiDAST image</title><link>https://example.docsy.dev/docs/02-how-tos/build-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/build-image/</guid><description>&lt;p>If you want to build your own RapiDAST image, run the following command.&lt;/p>
&lt;p>&lt;code>$ podman build . -f containerize/Containerfile -t &amp;lt;image-tag&amp;gt;&lt;/code>&lt;/p>
&lt;p>Disclaimer: This tool is not intended to be run as a long-running service. Instead, it is designed to be run for a short period of time while a scan is being invoked and executed in a separate test environment. If this tool is used solely for the scanning purposes, vulnerabilities that may be indicated to exist in the image will not have a chance to be exploited. The user assumes all risks and liability associated with its use.&lt;/p></description></item><item><title>Running on Kubernetes or OpenShift</title><link>https://example.docsy.dev/docs/02-how-tos/run-on-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/run-on-kubernetes/</guid><description>&lt;p>RapiDAST scans can be performed by using the Helm chart included in the repository. Consult &lt;a href="https://helm.sh/docs/intro/quickstart/">https://helm.sh/docs/intro/quickstart/&lt;/a> to install Helm.&lt;/p>
&lt;p>The Helm chart uses the official RapiDAST image: quay.io/redhatproductsecurity/rapidast:latest based on the code in the main branch.&lt;/p>
&lt;p>If you want to run a scan with the custom RapiDAST image(e.g. using the latest code in the development branch), you&amp;rsquo;ll need to build your own image and push it to your container registry. And update the image section of your chart/values.yaml file, according to your image name and tag.&lt;/p></description></item><item><title>Contributing</title><link>https://example.docsy.dev/docs/10-contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/10-contributing/</guid><description>&lt;p>Contribution to the project is more than welcome.&lt;/p>
&lt;ul>
&lt;li>Contribution to the documentation: TBD&lt;/li>
&lt;li>Contribution to the RapiDAST project: &lt;a href="https://github.com/RedHatProductSecurity/rapidast/blob/development/CONTRIBUTING.md">CONTRIBUTING.md&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Search Results</title><link>https://example.docsy.dev/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/search/</guid><description/></item></channel></rss>