<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How-tos on RapiDAST</title><link>https://example.docsy.dev/docs/02-how-tos/</link><description>Recent content in How-tos on RapiDAST</description><generator>Hugo</generator><language>en</language><atom:link href="https://example.docsy.dev/docs/02-how-tos/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration Overview</title><link>https://example.docsy.dev/docs/02-how-tos/configuration-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/configuration-overview/</guid><description>&lt;p>The configuration file is presented as YAML, and contains several main entries:&lt;/p>
&lt;ul>
&lt;li>&lt;code>config&lt;/code> : contains &lt;code>configVersion&lt;/code> which tells RapiDAST how to consume the config file&lt;/li>
&lt;li>&lt;code>application&lt;/code> : contains data relative to the application being scanned : name, etc.&lt;/li>
&lt;li>&lt;code>general&lt;/code> : contains data that will be used by all the scanners, such as proxy configuration, etc.
&lt;ul>
&lt;li>Each scanner can override an entry from &lt;code>general&lt;/code> by creating an entry with the same name&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>scanners&lt;/code> : list of scanners, and their configuration&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://example.docsy.dev/docs/02-how-tos/configuration-using-envvar/">Enviornment variables&lt;/a> can be used for configuration, e.g. for secrets.&lt;/p></description></item><item><title>Configuration using environment variables</title><link>https://example.docsy.dev/docs/02-how-tos/configuration-using-envvar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/configuration-using-envvar/</guid><description>&lt;p>You may not want to directly have configuration values inside the configuration. Typically: either the entry is a secret (such as a password), but the configuration needs to be public, or the entry needs to be dynamically generated (e.g.: a cookie, a uniquely generated URL, etc.) at the time of running RapiDAST, and it&amp;rsquo;s an inconvenient to always having to modify the configuration file for each run.&lt;/p>
&lt;p>To avoid this, RapiDAST proposes 2 ways to provide a value for a given configuration entry. For example, to provide a value for the entry general.authentication.parameters.rtoken, you can either (in order of priority):&lt;/p></description></item><item><title>Authentication</title><link>https://example.docsy.dev/docs/02-how-tos/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/authentication/</guid><description>&lt;p>Authentication is configured in the &lt;code>general&lt;/code> entry, as it can be applied to multiple scanning options. Currently, Authentication is applied to [ZAP] scanning only. In the long term it may be applied to other scanning configurations.&lt;/p>
&lt;h2 id="supported-options">Supported options:&lt;a class="td-heading-self-link" href="#supported-options" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="no-authentication">No authentication:&lt;a class="td-heading-self-link" href="#no-authentication" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The scanners will communicate anonymously with the application&lt;/p>
&lt;h3 id="oauth2-using-a-refresh-token">OAuth2 using a Refresh Token:&lt;a class="td-heading-self-link" href="#oauth2-using-a-refresh-token" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>This method describes required parameters needed to retrieve an access token, using a refresh token as a secret.&lt;/p></description></item><item><title>Exporting to Google Cloud Storage</title><link>https://example.docsy.dev/docs/02-how-tos/export-to-gcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/export-to-gcs/</guid><description>&lt;p>This simply stores the data as a compressed tarball in a Google Cloud Storage bucket.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Defect dojo configuration&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">googleCloudStorage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">keyFile&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/path/to/GCS/key&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># optional: path to the GCS key file (alternatively: use GOOGLE_APPLICATION_CREDENTIALS)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bucketName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;name-of-GCS-bucket-to-export-to&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Mandatory&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">directory&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;override-of-default-directory&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Optional directory where the credentials have write access, defaults to `RapiDAST-&amp;lt;product&amp;gt;`&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once this is set, scan results will be exported to the bucket automatically. The tarball file will include:&lt;/p></description></item><item><title>Exporting to OWASP Defect Dojo</title><link>https://example.docsy.dev/docs/02-how-tos/export-to-owasp-defect-dojo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/export-to-owasp-defect-dojo/</guid><description>&lt;p>RapiDAST supports integration with &lt;a href="https://owasp.org/www-project-defectdojo/">OWASP DefectDojo&lt;/a> which is an open source vulnerability management tool.&lt;/p>
&lt;h2 id="preamble-creating-defectdojo-user">Preamble: creating DefectDojo user&lt;a class="td-heading-self-link" href="#preamble-creating-defectdojo-user" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>RapiDAST needs to be able to authenticate to your DefectDojo instance. However, ideally, it should have the minimum set of permissions, such that it will not be allowed to modify products other than the one(s) it is supposed to.&lt;/p>
&lt;p>In order to do that:&lt;/p>
&lt;ul>
&lt;li>create a user without any global role&lt;/li>
&lt;li>add that user as a &amp;ldquo;writer&amp;rdquo; for the product(s) it is supposed to scan&lt;/li>
&lt;/ul>
&lt;p>Then the product, as well as an engagement for that product, must be created in your DefectDojo instance. It would not be advised to give the RapiDAST user an &amp;ldquo;admin&amp;rdquo; role and simply set &lt;code>auto_create_context&lt;/code> to True, as it would be both insecure and accident prone (a typo in the product name would let RapiDAST create a new product)&lt;/p></description></item><item><title>Multiple scans at once</title><link>https://example.docsy.dev/docs/02-how-tos/multiple-scans/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/multiple-scans/</guid><description>&lt;p>It is possible to run a scanner several times with different configurations. This is done by adding a different identifier to each scan, by appending &lt;code>_&amp;lt;id&amp;gt;&lt;/code> to the scanner name.&lt;/p>
&lt;p>For example :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scanners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">zap_unauthenticated&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiScan&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apis&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://example.com/api/openapi.json&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">zap_authenticated&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">authentication&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http_basic&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">parameters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">username&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;mypassw0rd&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiScan&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apis&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://example.com/api/openapi.json&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above, the ZAP scanner will first run without authentication, and then rerun again with a basic HTTP authentication.
The results will be stored in their respective names (i.e.: &lt;code>zap_unauthenticated&lt;/code> and &lt;code>zap_authenticated&lt;/code> in the example above).&lt;/p></description></item><item><title>Specifiying scanner path</title><link>https://example.docsy.dev/docs/02-how-tos/specify-scanner-path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/specify-scanner-path/</guid><description>&lt;p>When running RapiDAST scans from source on your localhost, specify the path to the scanning tool if it is not included in your system&amp;rsquo;s PATH.&lt;/p>
&lt;p>For macOS, the default path to ZAP is typically &lt;code>/Applications/ZAP.app/Contents/Java/zap.sh&lt;/code>.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scanners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">container&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">parameters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">executable&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/Applications/ZAP.app/Contents/Java/zap.sh&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Build a RapiDAST image</title><link>https://example.docsy.dev/docs/02-how-tos/build-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/build-image/</guid><description>&lt;p>If you want to build your own RapiDAST image, run the following command.&lt;/p>
&lt;p>&lt;code>$ podman build . -f containerize/Containerfile -t &amp;lt;image-tag&amp;gt;&lt;/code>&lt;/p>
&lt;p>Disclaimer: This tool is not intended to be run as a long-running service. Instead, it is designed to be run for a short period of time while a scan is being invoked and executed in a separate test environment. If this tool is used solely for the scanning purposes, vulnerabilities that may be indicated to exist in the image will not have a chance to be exploited. The user assumes all risks and liability associated with its use.&lt;/p></description></item><item><title>Running on Kubernetes or OpenShift</title><link>https://example.docsy.dev/docs/02-how-tos/run-on-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/02-how-tos/run-on-kubernetes/</guid><description>&lt;p>RapiDAST scans can be performed by using the Helm chart included in the repository. Consult &lt;a href="https://helm.sh/docs/intro/quickstart/">https://helm.sh/docs/intro/quickstart/&lt;/a> to install Helm.&lt;/p>
&lt;p>The Helm chart uses the official RapiDAST image: quay.io/redhatproductsecurity/rapidast:latest based on the code in the main branch.&lt;/p>
&lt;p>If you want to run a scan with the custom RapiDAST image(e.g. using the latest code in the development branch), you&amp;rsquo;ll need to build your own image and push it to your container registry. And update the image section of your chart/values.yaml file, according to your image name and tag.&lt;/p></description></item></channel></rss>